#########################################
## Connection Group
#########################################
<CONNECTION_INFO>
    <DB_IP>        127.0.0.1 </DB_IP>
    <SYS_PASSWD>   manager     </SYS_PASSWD>
    <PORT_NO>      20300       </PORT_NO>
    <REPL_PORT>    30300       </REPL_PORT>
    <NLS_USE>      MS949       </NLS_USE>
</CONNECTION_INFO>


#########################################
## REPOSITORY PROPERTY
#########################################
<REPOSITORY_INFO>
    <SITE_NAME> v880        </SITE_NAME> # 여러 altimon 간의 해당 서버를 구분할 고유의 alias
    <DURATION> 30           </DURATION>  # 데이터 유지기간 (일단위)
    <DB_IP>    127.0.0.1    </DB_IP>     # DB Server IP for repository
    <PORT_NO>  20300        </PORT_NO>   # DB port for repository
    <NLS_USE>  KO16KSC5601  </NLS_USE>   # DB nls_use for repository
    <USER>     SYS          </USER>      # DB user for repository ( recomand create user 'altimon')
    <PASSWD>   MANAGER      </PASSWD>
</REPOSITORY_INFO>

#########################################
## ALTIMON PROPERTY
#########################################
<ALTIMON_PROPERTY>
    <DATE_FORMAT>   1    </DATE_FORMAT> # 1. yyyy-mm-dd hh:mi:ss   2. mm-dd hh:mi:ss   3. hh:mi:ss
    <SLEEP_TIME>    300  </SLEEP_TIME>
    <LOG_FILE>      /home1/altibase_home/altimon/log/altimon.log </LOG_FILE>
    <LOG_DIR>       /home1/altibase_home/altimon/log </LOG_DIR>
    <LIFE_CYCLE>    7    </LIFE_CYCLE>
    <LOGGING_LV>    2    </LOGGING_LV>
    <ALARM_FILE>   /home1/altibase_home/altimon/log/alarm.log   </ALARM_FILE>
    <DB_SAVE>       OFF   </DB_SAVE>
    <LISTEN_PORT>   22300 </LISTEN_PORT> 
</ALTIMON_PROPERTY>

#########################################
## PROCESS CHECK PROPERTY
#########################################
<OS_QUERY_GROUP_SET>
    <CPU_USAGE> 80 </CPU_USAGE>
    <CPU_ACT> 
       is -silent -f $HOME/altimon/ACTION_SCRIPT/cpu_act.sql -o $HOME/altimon/ACTION_LOG/cpu_act.log.`date +%Y%m%d_%H%M%S` 
    </CPU_ACT>
    <MEM_USAGE> 100000000 </MEM_USAGE>
    <MEM_ACT> 
       is -silent -f $HOME/altimon/ACTION_SCRIPT/mem_act.sql -o $HOME/altimon/ACTION_LOG/mem_act.log.`date +%Y%m%d_%H%M%S` 
    </MEM_ACT> 
    <DISK_CHK_ENABLE> ON </DISK_CHK_ENABLE>
    <DISK1>  /home  </DISK1>
    <DISK1_USAGE> 90 </DISK1_USAGE>
    <DISK2>  /home1 </DISK2>
    <DISK2_USAGE> 90 </DISK2_USAGE>
    <DISK_ACT> 
    </DISK_ACT> 
</OS_QUERY_GROUP_SET>


#########################################
## Monitoring query
#########################################
<MONITOR_QUERY_GROUP_SET>
    <LOGFILE_COUNT> 
        <QUERY>
             select  (select OLDEST_LOGFILE_NO from v$log) as old_log,
                     (select current_logfile from v$archive) as curr_log,
                    ((select current_logfile from v$archive) - (select OLDEST_LOGFILE_NO from v$log)) as log_gap
             from dual
        </QUERY>
        <DISPLAY>      1     </DISPLAY>
        <CHECKNAME> log_gap  </CHECKNAME>
        <CHECKVALUE>   500   </CHECKVALUE>
        <COMPARE>      G     </COMPARE>
        <ENABLE>       ON    </ENABLE>
        <ACTION> 
            is -silent -f $HOME/altimon/ACTION_SCRIPT/logfile_act.sql -o $HOME/altimon/ACTION_LOG/logfile_act.log.`date +%Y%m%d_%H%M%S` 
        </ACTION> 
    </LOGFILE_COUNT>

    <MEMSTAT_SUM>
        <QUERY>
             select trunc(sum(MAX_TOTAL_SIZE)/1024/1024, 2) as max_total_mb,  
                    trunc(sum(ALLOC_SIZE)/1024/1024, 2) as current_mb 
             from v$memstat
        </QUERY>
        <DISPLAY>       1        </DISPLAY>
        <CHECKNAME>   max_total_mb  </CHECKNAME>
        <CHECKVALUE>    7000    </CHECKVALUE>
        <COMPARE>       G        </COMPARE>
        <ENABLE>        ON       </ENABLE>

    </MEMSTAT_SUM>

    <MEMSTAT_LIST>
        <QUERY>
           SELECT * FROM v$MEMSTAT ORDER BY 4 DESC LIMIT 30;
        </QUERY>
        <DISPLAY>       1        </DISPLAY>
        <ENABLE>       ON      </ENABLE>
    </MEMSTAT_LIST>

    <MEM_DATABASE_USAGE>
        <QUERY>
               select 
                  trunc(mem_alloc_page_count*32/1024, 2) as alloc_mem_mb,
                  trunc(mem_free_page_count*32/1024, 2) as free_mem_mb
               from v$database
        </QUERY>
        <DISPLAY>       1                  </DISPLAY>
        <CHECKNAME>    alloc_mem_mb        </CHECKNAME>
        <CHECKVALUE>   8000                </CHECKVALUE>
        <COMPARE>      G                   </COMPARE>
        <ENABLE>       ON                  </ENABLE>
#        <ACTION>
#           is -silent -f $HOME/altimon/ACTION_SCRIPT/db_usage.sql -o $HOME/altimon/ACTION_LOG/db_usage.log.`date +%Y%m%d_%H%M%S`
#        </ACTION>
    </MEM_DATABASE_USAGE>

    <SYSSTAT_LIST>
        <QUERY>
           SELECT * FROM V$SYSSTAT WHERE SEQNUM < 88;
        </QUERY>
        <DISPLAY>       1                  </DISPLAY>
        <ENABLE>       ON                  </ENABLE>
    </SYSSTAT_LIST>

    <MEM_TABLE_USAGE_SUM>
        <QUERY>
               select 
                  trunc(sum(fixed_alloc_mem+var_alloc_mem)/1024/1024,2) as alloc_mem_mb,
                  trunc(sum(fixed_used_mem+var_used_mem)/1024/1024,2) as used_mem_mb
               from v$memtbl_info
        </QUERY>
        <DISPLAY>       1          </DISPLAY>
        <CHECKNAME>    alloc_mem_mb    </CHECKNAME>
        <CHECKVALUE>   20480  </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE>       ON         </ENABLE>
        <ACTION>
           is -silent -f $HOME/altimon/ACTION_SCRIPT/mem_act.sql -o $HOME/altimon/ACTION_LOG/mem_act.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </MEM_TABLE_USAGE_SUM>

    <MEM_TABLE_USAGE>
        <QUERY>
               select
                  table_name,
                  round((FIXED_ALLOC_MEM+VAR_ALLOC_MEM)/1024/1024, 2) as 'alloc(MB)',
                  round((fixed_used_mem+var_used_mem)/1024/1024, 2) as 'used(MB)'
               from system_.sys_tables_ a, v$memtbl_info b
               where a.table_oid = b.table_oid
               order by 2;
        </QUERY>
        <DISPLAY>       1          </DISPLAY>
        <CHECKNAME>    used_mem    </CHECKNAME>
        <CHECKVALUE>   20480  </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE>       OFF         </ENABLE>
        <ACTION>
           is -silent -f $HOME/altimon/ACTION_SCRIPT/mem_act.sql -o $HOME/altimon/ACTION_LOG/mem_act.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </MEM_TABLE_USAGE>


    <TABLESPACE_USAGE>
        <QUERY>
SELECT NAME TBS_NAME
     , TO_CHAR(ROUND(D.MAX * PAGE_SIZE / 1024 /1024, 2)) 'MAX(M)'
     , ROUND(TOTAL_PAGE_COUNT * PAGE_SIZE / 1024 / 1024, 2) 'TOTAL(M)'
     , DECODE(TYPE, 7, ROUND((SELECT (SUM(total_page_count) * PAGE_SIZE)/1024/1024
                          FROM V$undo_seg)+ (SELECT (SUM(ALLOC_PAGE_COUNT) * PAGE_SIZE)/1024/1024
                          FROM v$tss_seg), 2) , ROUND(ALLOCATED_PAGE_COUNT * PAGE_SIZE / 1024 / 1024, 2)) 'ALLOC(M)'
     , DECODE(TYPE, 7, ROUND( ( (SELECT SUM(total_page_count)
                                  FROM V$undo_seg) + (SELECT SUM(ALLOC_PAGE_COUNT)
                                  FROM v$tss_seg ) ) / D.MAX * 100, 2) , ROUND(ALLOCATED_PAGE_COUNT / D.MAX * 100, 2)) 'USAGE(%)'
     , DECODE(STATE, 1, 'OFFLINE', 2, 'ONLINE', 5, 'OFFLINE BACKUP', 6, 'ONLINE BACKUP', 128, 'DROPPED', 'DISCARDED') STATE
     , D.AUTOEXTEND
  FROM V$TABLESPACES T
     ,(SELECT SPACEID
             , SUM(DECODE(MAXSIZE, 0, CURRSIZE, MAXSIZE)) AS MAX
             , DECODE(MAX(AUTOEXTEND), 1, 'ON', 'OFF') 'AUTOEXTEND'
          FROM V$DATAFILES
         GROUP BY SPACEID) D
 WHERE T.ID = D.SPACEID 
        </QUERY>
        <DISPLAY> 1                  </DISPLAY>
        <CHECKNAME>    USAGE(%)  </CHECKNAME>
        <CHECKVALUE>   80          </CHECKVALUE>
        <COMPARE>      G             </COMPARE>
        <ENABLE> ON </ENABLE>
    </TABLESPACE_USAGE>

    <SEGMENT_USAGE>
        <QUERY>
           select name, sum(EXTENT_TOTAL_COUNT)*256 as 'usage(M)' 
           from v$tablespaces a,  V$SEGMENT b 
           where a.id=b.space_id 
           group by name 
           ORDER BY name;
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> OFF </ENABLE>
    </SEGMENT_USAGE>

    <UNDO_USAGE>
        <QUERY>
           select sum(total_page_count), sum(free_page_count), (sum(free_page_count)/sum(total_page_count))*100, sum(EXTENT_TOTAL_COUNT)*256 as 'usage(M)' 
           from v$tablespaces a,  V$SEGMENT b 
           where a.id=b.space_id 
           group by name 
           ORDER BY name;
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> OFF </ENABLE>
    </UNDO_USAGE>

    <DISK_TBL_USAGE>
        <QUERY>
SELECT U.USER_NAME USER_NAME
     , DECODE(TBL.IS_PARTITIONED, 'T', 'PARTITIONED', 'F', 'NON-PARTITIONED') PARTITIONED
     , TBL.TABLE_NAME TABLE_NAME
     , DECODE(TBL.IS_PARTITIONED, 'T', TBL.PARTITION_NAME, 'F', '-') PARTITIONED_TABLE
     , TBS.NAME TABLESPACE_NAME
     , TO_CHAR((D.MAX * TBS.PAGE_SIZE)/1024, '999,999,999') 'MAX(KB)'
     , TO_CHAR((TBS.EXTENT_PAGE_COUNT * TBS.PAGE_SIZE * SEG.EXTENT_TOTAL_COUNT)/1024, '999,999,999') 'ALLOC(KB)'
     , TO_CHAR((((TBS.EXTENT_PAGE_COUNT * TBS.PAGE_SIZE * SEG.EXTENT_TOTAL_COUNT)/(D.MAX*TBS.PAGE_SIZE))*100), '99.99') 'USAGE(%)'
  FROM (SELECT TBL.USER_ID
             , DECODE(TBL.IS_PARTITIONED, 'F', TBL.TABLE_OID, 'T', PT.PARTITION_OID) TABLE_OID
             , TBL.TABLE_NAME
             , PT.PARTITION_NAME
             , DECODE(TBL.IS_PARTITIONED, 'F', TBL.TBS_ID, 'T', PT.TBS_ID) TBS_ID
             , TBL.IS_PARTITIONED
          FROM SYSTEM_.SYS_TABLES_ TBL LEFT OUTER JOIN SYSTEM_.SYS_TABLE_PARTITIONS_ PT ON TBL.TABLE_ID = PT.TABLE_ID) TBL
     , V$SEGMENT SEG
     , SYSTEM_.SYS_USERS_ U
     , V$TABLESPACES TBS
     , (SELECT SPACEID
             , SUM(DECODE(MAXSIZE, 0, CURRSIZE, MAXSIZE)) AS MAX
             , DECODE(MAX(AUTOEXTEND),1,'ON','OFF') 'AUTOEXTEND'
          FROM V$DATAFILES
         GROUP BY SPACEID) D
 WHERE 1=1
   AND SEG.SEGMENT_TYPE = 'TABLE'
   AND SEG.TABLE_OID = TBL.TABLE_OID
   AND U.USER_ID = TBL.USER_ID
   AND D.SPACEID = TBL.TBS_ID
   AND TBS.ID = TBL.TBS_ID
 ORDER BY USER_NAME
     , PARTITIONED
     , TABLE_NAME
     , PARTITIONED_TABLE 
        </QUERY> <DISPLAY>       1          </DISPLAY>
        <ENABLE>       ON         </ENABLE>
    </DISK_TBL_USAGE>

    <MEM_TABLE_USAGE>
        <QUERY>
               select
                  table_name,
                  FIXED_ALLOC_MEM+VAR_ALLOC_MEM alloc,
                  (FIXED_ALLOC_MEM+VAR_ALLOC_MEM)-(FIXED_USED_MEM+VAR_USED_MEM) free
               from system_.sys_tables_ a, v$memtbl_info b
               where a.table_oid = b.table_oid
               order by 2;
        </QUERY>
        <DISPLAY>       1          </DISPLAY>
        <CHECKNAME>    used_mem    </CHECKNAME>
        <CHECKVALUE>   20480  </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE>       OFF         </ENABLE>
        <ACTION>
           is -silent -f $HOME/altimon/ACTION_SCRIPT/mem_act.sql -o $HOME/altimon/ACTION_LOG/mem_act.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </MEM_TABLE_USAGE>

    <SERVICE_THREAD_MODE>
        <QUERY>
        select run_mode, count(*) cnt from V$service_thread group by run_mode order by 1;
        </QUERY>
        <DISPLAY>     1         </DISPLAY>
        <ENABLE>      ON       </ENABLE>
    </SERVICE_THREAD_MODE>

    <SERVICE_THREAD_STATE>
        <QUERY>
        select state, count(*) cnt from V$service_thread group by state order by 1;
        </QUERY>
        <DISPLAY>     1         </DISPLAY>
        <ENABLE>      ON       </ENABLE>
    </SERVICE_THREAD_STATE>

    <SESSION_COUNT>
        <QUERY> select count(*) as sid_count from v$session </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <CHECKNAME>    sid_count   </CHECKNAME>
        <CHECKVALUE>   100           </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE>       ON </ENABLE>
        <ACTION>
        </ACTION>
    </SESSION_COUNT>


    <COMMNAME_COUNT>
        <QUERY> select substr(comm_name, 1, 16) comm_name, count(*) from v$session group by substr(comm_name, 1, 16) </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE>       ON </ENABLE>
    </COMMNAME_COUNT>

    <CLIENT_TYPE_COUNT>
        <QUERY> select CLIENT_TYPE, count(*) from v$session group by client_type </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE>       ON </ENABLE>
    </CLIENT_TYPE_COUNT>

    <STATEMENT_COUNT>
        <QUERY> select count(*) as stmt_count from v$statement </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <CHECKNAME>    stmt_count   </CHECKNAME>
        <CHECKVALUE>   2000           </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE> ON </ENABLE>
        <ACTION>
        </ACTION>
    </STATEMENT_COUNT>

    <MEM_GC>
        <QUERY>
               select
                  gc_name,
               -- MINMEMSCNINTXS-SCNOFTAIL,
                  ADD_OID_CNT-GC_OID_CNT gc_gap
               from v$memgc;
        </QUERY>
        <DISPLAY>       1          </DISPLAY>
        <CHECKNAME>    gc_gap    </CHECKNAME>
        <CHECKVALUE>   1000  </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE>       ON         </ENABLE>
    </MEM_GC>

    <BUFFER_STAT>
        <QUERY>
            select victim_fails,READ_PAGES from v$buffpool_stat;
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> ON </ENABLE>
    </BUFFER_STAT>

    <LOCK_DESC>
        <QUERY>
            select b.session_id as sid, 
                   b.tx_id as tId, 
                   b.is_grant as isgran,
                   b.lock_desc as Ldesc, 
                   a.table_name as ltable,
                   trunc(c.total_time/1000000, 4) as TTime
            from system_.sys_tables_ a, v$lock_statement b, v$statement c
            where a.table_oid = b.table_oid
              and   c.session_id = b.session_id
              and   c.tx_id      = b.tx_id
              and   (c.total_time/1000000) > 1
            group by b.session_id, b.tx_id, b.is_grant, total_time, a.table_name, b.lock_desc 
            order by b.session_id, b.tx_id, b.is_grant, total_time, a.table_name, b.lock_desc  
            --order by b.tx_id, b.table_oid, b.is_grant, c.total_time
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> ON </ENABLE>
    </LOCK_DESC>

    <LONG_RUN_QUERY>
        <QUERY>
               select to_char(sysdate, 'YYYY/MM/DD HH:MI:SS') cur_time,
                      start_time,
                      session_id sid,
                      comm_name ip,
                      client_pid pid,
                      stmt_id,
                      tx_id,
                      active_flag,
                      execute_flag,
                      begin_flag,
                      trunc(execute_time/1000000,2) rtime,
                      trunc(fetch_time/1000000,2) ftime,
                      trunc(total_time/1000000,2) ttime,
                      query
               from ( select CASE2(LAST_QUERY_START_TIME = 0, '1970/01/01 12:00:00',
                       TO_CHAR(TO_DATE('1970010109','YYYYMMDDHH') +
                       LAST_QUERY_START_TIME/60/60/24 , 'YYYY/MM/DD HH:MI:SS')) as start_time,
                             session_id,
                             id as stmt_id,
                             tx_id,
                             execute_time,
                             fetch_time,
                             total_time,
                             execute_flag,
                             begin_flag,
                             query
                      FROM v$statement) a, v$session b
               where a.session_id = b.id
                 and query not like '%LAST_QUERY_START_TIME%'
                 and total_time/1000000 > 1
                 --and (sysdate - to_date(start_time, 'YYYY/MM/DD HH:MI:SS'))*24*60*60 >= total_time
                 and IDLE_START_TIME = 0
                 and CURRENT_STMT_ID = stmt_id
               order by ttime desc;
        </QUERY>
        <DISPLAY>    1   </DISPLAY>
        <ENABLE>     ON  </ENABLE>
        <ACTION>
           is -silent -f $HOME/altimon/ACTION_SCRIPT/long_query.sql -o $HOME/altimon/ACTION_LOG/long_query.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </LONG_RUN_QUERY>

    <UTRANS_QUERY>
        <QUERY>
            SELECT 
                   ST.SESSION_ID AS SID,
                   SS.COMM_NAME AS IP,
                   SS.client_pid AS PID,
                   ST.ID AS STMT_ID, 
                   BASE_TIME - TR.FIRST_UPDATE_TIME AS UTRANS_TIME
              FROM V$TRANSACTION TR, V$STATEMENT ST, v$session SS, V$SESSIONMGR
             WHERE TR.ID = ST.TX_ID 
               AND ST.SESSION_ID = SS.ID
               AND TR.FIRST_UPDATE_TIME != 0
               AND (BASE_TIME - tr.FIRST_UPDATE_TIME) > 60
            ;
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> ON </ENABLE>
    </UTRANS_QUERY>

    <REPLICATION_GAP>
        <QUERY>
        SELECT REP_NAME, REP_GAP FROM V$REPGAP GROUP BY REP_NAME, REP_GAP LIMIT 1 
        </QUERY>
        <CHECKNAME>   rep_gap   </CHECKNAME>
        <CHECKVALUE>  100000 </CHECKVALUE>
        <COMPARE>     G         </COMPARE>
        <DISPLAY>     0         </DISPLAY>
        <ENABLE>      OFF        </ENABLE>
        <ACTION>
           is -silent -f $HOME/altimon/ACTION_SCRIPT/rep_act.sql -o $HOME/altimon/ACTION_LOG/rep_act.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </REPLICATION_GAP>

    <SYSTEM_WAIT_CLASS_1>
        <QUERY>
	SELECT * FROM V$SYSTEM_WAIT_CLASS WHERE WAIT_CLASS != 'Idle' ORDER BY TIME_WAITED DESC LIMIT 20;
        </QUERY>
        <DISPLAY>       1        </DISPLAY>
        <ENABLE>       ON      </ENABLE>
    </SYSTEM_WAIT_CLASS_1>

    <SYSTEM_WAIT_CLASS_2>
        <QUERY>
	SELECT * FROM V$SYSTEM_WAIT_CLASS WHERE WAIT_CLASS != 'Idle' ORDER BY TOTAL_WAITS DESC LIMIT 20;
        </QUERY>
        <DISPLAY>       1        </DISPLAY>
        <ENABLE>       ON      </ENABLE>
    </SYSTEM_WAIT_CLASS_2>

    <SESSION_EVENT>
        <QUERY>
           SELECT SID, EVENT, TOTAL_WAITS, AVERAGE_WAIT, TIME_WAITED, TIME_WAITED_MICRO, AVERAGE_WAIT
             FROM V$SESSION_EVENT
            ORDER BY TOTAL_WAITS DESC
            LIMIT 10;
        </QUERY>
        <DISPLAY>       1        </DISPLAY>
        <ENABLE>       ON      </ENABLE>
    </SESSION_EVENT>

    <DB_EVENT>
        <QUERY>
           SELECT WAIT_CLASS, EVENT, TOTAL_WAITS, TIME_WAITED_MICRO
             FROM V$SYSTEM_EVENT
            WHERE WAIT_CLASS != 'Idle'
            ORDER BY TIME_WAITED_MICRO DESC
            LIMIT 10;
        </QUERY>
        <DISPLAY>       1        </DISPLAY>
        <ENABLE>       ON      </ENABLE>
    </DB_EVENT>

    <DATAFILE_STAT>
        <QUERY>
           SELECT B.NAME, A.SINGLEBLKRDS, A.SINGLEBLKRDTIM, TRUNC(A.SINGLEBLKRDTIM/A.SINGLEBLKRDS,2) AVERAGE_WAIT
             FROM V$FILESTAT A,
                  V$DATAFILES B
            WHERE A.SPACEID = B.SPACEID
              AND A.FILEID = B.ID
              AND A.SINGLEBLKRDS > 0
            ORDER BY AVERAGE_WAIT DESC;
        </QUERY>
        <DISPLAY>       1        </DISPLAY>
        <ENABLE>       ON      </ENABLE>
    </DATAFILE_STAT>

    <DATAFILE_STAT_2>
        <QUERY>
           SELECT SUBSTR( B.NAME, 1, 128 ) NAME, A.PHYRDS PHY_RDS, A.PHYWRTS PHY_WRTS, A.PHYRDS + A.PHYWRTS TOTAL_IO,
                  TRUNC( A.PHYRDS / READ_SUM * 100, 2 ) READ_PER, TRUNC( A.PHYWRTS / WRITE_SUM * 100, 2 ) WRITE_PER,
                  TRUNC( ( A.PHYRDS + A.PHYWRTS ) / ( READ_SUM + WRITE_SUM ) * 100 , 2 ) TOTAL_IO_PER, A.AVGIOTIM AVG_IO_TIME
             FROM V$FILESTAT A,
                  V$DATAFILES B,
                  ( SELECT SUM(PHYRDS) READ_SUM, SUM(PHYWRTS) WRITE_SUM 
                      FROM V$FILESTAT ) C
            WHERE A.SPACEID = B.SPACEID
              AND A.FILEID = B.ID
              AND READ_SUM > 0
              AND WRITE_SUM > 0
            ORDER BY A.PHYRDS + A.PHYWRTS DESC, ROWNUM DESC;
        </QUERY>
        <DISPLAY>       1        </DISPLAY>
        <ENABLE>       ON      </ENABLE>
    </DATAFILE_STAT_2>

</MONITOR_QUERY_GROUP_SET>
