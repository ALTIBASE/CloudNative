#########################################
## Connection Group
#########################################
<CONNECTION_INFO>
    <DB_IP>        127.0.0.1 </DB_IP>
    <SYS_PASSWD>   manager     </SYS_PASSWD>
    <PORT_NO>      20300       </PORT_NO>
    <REPL_PORT>    30300       </REPL_PORT>
    <NLS_USE>      MS949       </NLS_USE>
</CONNECTION_INFO>


#########################################
## REPOSITORY PROPERTY
#########################################
<REPOSITORY_INFO>
    <SITE_NAME> v880        </SITE_NAME> # 여러 altimon 간의 해당 서버를 구분할 고유의 alias
    <DURATION> 30           </DURATION>  # 데이터 유지기간 (일단위)
    <DB_IP>    127.0.0.1    </DB_IP>     # DB Server IP for repository
    <PORT_NO>  20300        </PORT_NO>   # DB port for repository
    <NLS_USE>  KO16KSC5601  </NLS_USE>   # DB nls_use for repository
    <USER>     SYS          </USER>      # DB user for repository ( recomand create user 'altimon')
    <PASSWD>   MANAGER      </PASSWD>
</REPOSITORY_INFO>

#########################################
## ALTIMON PROPERTY
#########################################
<ALTIMON_PROPERTY>
    <DATE_FORMAT>   1    </DATE_FORMAT> # 1. yyyy-mm-dd hh:mi:ss   2. mm-dd hh:mi:ss   3. hh:mi:ss
    <SLEEP_TIME>    10   </SLEEP_TIME>
    <LOG_FILE>      /data/eheejung/altimon/log/altimon.log </LOG_FILE>
    <LOG_DIR>       /data/eheejung/altimon/log </LOG_DIR>
    <LIFE_CYCLE>    7    </LIFE_CYCLE>
    <LOGGING_LV>    1    </LOGGING_LV>
    <ALARM_FILE>   /data/eheejung/altimon/log/alarm.log   </ALARM_FILE>
    <DB_SAVE>       OFF   </DB_SAVE>
    <LISTEN_PORT>   22300 </LISTEN_PORT> 
</ALTIMON_PROPERTY>

#########################################
## PROCESS CHECK PROPERTY
#########################################
<OS_QUERY_GROUP_SET>
    <CPU_USAGE> 80 </CPU_USAGE>
    <CPU_ACT> 
       is -silent -f $HOME/altimon/ACTION_SCRIPT/cpu_act.sql -o $HOME/altimon/ACTION_LOG/cpu_act.log.`date +%Y%m%d_%H%M%S` 
    </CPU_ACT>
    <MEM_USAGE> 100000000 </MEM_USAGE>
    <MEM_ACT> 
       is -silent -f $HOME/altimon/ACTION_SCRIPT/mem_act.sql -o $HOME/altimon/ACTION_LOG/mem_act.log.`date +%Y%m%d_%H%M%S` 
    </MEM_ACT> 
    <DISK_CHK_ENABLE> ON </DISK_CHK_ENABLE>
    <DISK1>  /data  </DISK1>
    <DISK1_USAGE> 90 </DISK1_USAGE>
    <DISK_ACT> 
    </DISK_ACT> 
</OS_QUERY_GROUP_SET>


#########################################
## Monitoring query
#########################################
<MONITOR_QUERY_GROUP_SET>
    <LOGFILE_COUNT> 
        <QUERY>
             select  (select OLDEST_LOGFILE_NO from v$log) as old_log,
                     (select current_logfile from v$archive) as curr_log,
                    ((select current_logfile from v$archive) - (select OLDEST_LOGFILE_NO from v$log)) as log_gap
             from dual
        </QUERY>
        <DISPLAY>      1     </DISPLAY>
        <CHECKNAME> log_gap  </CHECKNAME>
        <CHECKVALUE>   500   </CHECKVALUE>
        <COMPARE>      G     </COMPARE>
        <ENABLE>       ON    </ENABLE>
        <ACTION> 
            is -silent -f $HOME/altimon/ACTION_SCRIPT/logfile_act.sql -o $HOME/altimon/ACTION_LOG/logfile_act.log.`date +%Y%m%d_%H%M%S` 
        </ACTION> 
    </LOGFILE_COUNT>

    <MEMSTAT_SUM>
        <QUERY>
             select trunc(sum(MAX_TOTAL_SIZE)/1024/1024, 2) as max_total_mb,  
                    trunc(sum(ALLOC_SIZE)/1024/1024, 2) as current_mb 
             from v$memstat
        </QUERY>
        <DISPLAY>       1        </DISPLAY>
        <CHECKNAME>   max_total_mb  </CHECKNAME>
        <CHECKVALUE>    7000    </CHECKVALUE>
        <COMPARE>       G        </COMPARE>
        <ENABLE>        ON       </ENABLE>

    </MEMSTAT_SUM>

    <MEMSTAT_LIST>
        <QUERY>
           SELECT * FROM v$MEMSTAT ORDER BY ALLOC_SIZE DESC ;
        </QUERY>
        <DISPLAY>       1        </DISPLAY>
        <ENABLE>       ON      </ENABLE>
    </MEMSTAT_LIST>

    <MEM_DATABASE_USAGE>
        <QUERY>
               select 
                  trunc(mem_alloc_page_count*32/1024, 2) as alloc_mem_mb,
                  trunc(mem_free_page_count*32/1024, 2) as free_mem_mb
               from v$database
        </QUERY>
        <DISPLAY>       1                  </DISPLAY>
        <CHECKNAME>    alloc_mem_mb        </CHECKNAME>
        <CHECKVALUE>   8000                </CHECKVALUE>
        <COMPARE>      G                   </COMPARE>
        <ENABLE>       ON                  </ENABLE>
#        <ACTION>
#           is -silent -f $HOME/altimon/ACTION_SCRIPT/db_usage.sql -o $HOME/altimon/ACTION_LOG/db_usage.log.`date +%Y%m%d_%H%M%S`
#        </ACTION>
    </MEM_DATABASE_USAGE>

    <SYSSTAT_LIST>
        <QUERY>
           SELECT * FROM V$SYSSTAT ;
        </QUERY>
        <DISPLAY>       1                  </DISPLAY>
        <ENABLE>       ON                  </ENABLE>
    </SYSSTAT_LIST>

    <MEM_TABLE_USAGE_SUM>
        <QUERY>
               select 
                  trunc(sum(fixed_alloc_mem+var_alloc_mem)/1024/1024,2) as alloc_mem_mb,
                  trunc(sum(fixed_used_mem+var_used_mem)/1024/1024,2) as used_mem_mb
               from v$memtbl_info
        </QUERY>
        <DISPLAY>       1          </DISPLAY>
        <CHECKNAME>    alloc_mem_mb    </CHECKNAME>
        <CHECKVALUE>   20480  </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE>       ON         </ENABLE>
        <ACTION>
           is -silent -f $HOME/altimon/ACTION_SCRIPT/mem_act.sql -o $HOME/altimon/ACTION_LOG/mem_act.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </MEM_TABLE_USAGE_SUM>


    <MEM_TBS_USAGE>
        <QUERY>
SELECT ID TBS_ID
     , DECODE(TYPE, 0, 'MEMORY_DICTIONARY', 1, 'MEMORY_SYS_DATA', 2, 'MEMORY_USER_DATA', 8, 'VOLATILE_USER_DATA') TBS_TYPE
     , NAME TBS_NAME
     , ROUND( DECODE(M.MAXSIZE, 140737488322560, D.MEM_MAX_DB_SIZE , 0 , T.TOTAL_PAGE_COUNT * T.PAGE_SIZE, M.MAXSIZE) /1024/1024, 2 ) 'MAX(M)'
     , ROUND( M.ALLOC_PAGE_COUNT * T.PAGE_SIZE / 1024 / 1024, 2) 'TOTAL(M)'
     , ROUND(NVL(M.ALLOC_PAGE_COUNT-M.FREE_PAGE_COUNT,T.TOTAL_PAGE_COUNT)*PAGE_SIZE/1024/1024, 2) 'ALLOC(M)'
     , NVL(MT.USED, 0) 'USED(M)'
     , ROUND(DECODE(MAXSIZE, 140737488322560, (M.ALLOC_PAGE_COUNT-M.FREE_PAGE_COUNT)*T.PAGE_SIZE/ D.MEM_MAX_DB_SIZE ,0, (M.ALLOC_PAGE_COUNT-M.FREE_PAGE_COUNT) / T.TOTAL_PAGE_COUNT , (M.ALLOC_PAGE_COUNT-M.FREE_PAGE_COUNT) * T.PAGE_SIZE/ M.MAXSIZE) * 100 , 2) 'USAGE(%)'
     , DECODE(T.STATE,1,'OFFLINE',2,'ONLINE',5,'OFFLINE BACKUP',6,'ONLINE BACKUP',128,'DROPPED', 'DISCARDED') STATE
     , DECODE(M.AUTOEXTEND_MODE,1,'ON','OFF') 'AUTOEXTEND'
  FROM V$DATABASE D
     , V$TABLESPACES T
     , (SELECT SPACE_ID
             , SPACE_NAME
             , ALLOC_PAGE_COUNT
             , FREE_PAGE_COUNT
             , MAX_SIZE AS MAXSIZE
             , AUTOEXTEND_MODE
          FROM V$VOL_TABLESPACES
         UNION
        SELECT SPACE_ID
             , SPACE_NAME
             , ALLOC_PAGE_COUNT
             , FREE_PAGE_COUNT
             , MAXSIZE
             , AUTOEXTEND_MODE
          FROM V$MEM_TABLESPACES ) M LEFT OUTER JOIN(SELECT TABLESPACE_ID, ROUND(SUM((FIXED_USED_MEM + VAR_USED_MEM))/(1024*1024),3) USED
          FROM V$MEMTBL_INFO
         GROUP BY TABLESPACE_ID ) MT ON M.SPACE_ID = MT.TABLESPACE_ID
 WHERE T.ID = M.SPACE_ID;
        </QUERY>
        <DISPLAY> 1                  </DISPLAY>
        <CHECKNAME>    USAGE(%)  </CHECKNAME>
        <CHECKVALUE>   80          </CHECKVALUE>
        <COMPARE>      G             </COMPARE>
        <ENABLE> ON </ENABLE>
    </MEM_TBS_USAGE>

    <DISK_TBS_USAGE>
        <QUERY>
SELECT DECODE(TYPE, 3, 'SYSTEM TABLESPACE', 4, 'USER DATA TABLESPACE', 5, 'SYSTEM TABLESPACE', 6, 'USER TEMP TABLESPACE', 7, 'SYSTEM TABLESPACE') TBS_TYPE
     , NAME TBS_NAME 
     , TO_CHAR((D.MAX * PAGE_SIZE / 1024 /1024), '999,999,999') 'MAX(M)'
     , TO_CHAR((TOTAL_PAGE_COUNT * PAGE_SIZE)/1024/1024, '999,999,999') 'TOTAL(M)'
     , DECODE(TYPE, 7, TO_CHAR((U.TOTAL_EXT_CNT*PROP.EXTENT_SIZE)/1024/1024, '999,999,999')
                     , TO_CHAR((ALLOCATED_PAGE_COUNT * PAGE_SIZE)/1024/1024, '999,999,999')) 'ALLOC(M)'
     , DECODE(TYPE, 3, TO_CHAR(NVL(DS.USED, 0)/1024/1024, '999,999,999'), 
                    4, TO_CHAR(NVL(DS.USED, 0)/1024/1024, '999,999,999'),
                    7, TO_CHAR(((U.TX_EXT_CNT+U.USED_EXT_CNT+U.UNSTEALABLE_EXT_CNT) * PROP.EXTENT_SIZE)/1024/1024, '999,999,999')
                     , LPAD('-', 12))'USED(M)'
     , DECODE(TYPE, 7, TO_CHAR((((U.TX_EXT_CNT+U.USED_EXT_CNT+U.UNSTEALABLE_EXT_CNT) * PROP.EXTENT_SIZE)/(D.MAX*PAGE_SIZE))*100, '99.99'),
                    3, TO_CHAR(NVL(DS.USED, 0)/(D.MAX*PAGE_SIZE)* 100, '99.99'),
                    4, TO_CHAR(NVL(DS.USED, 0)/(D.MAX*PAGE_SIZE)* 100, '99.99')
                     , TO_CHAR((ALLOCATED_PAGE_COUNT/D.MAX) * 100, '99.99')) 'USAGE(%)'                                                                 -- USAGE(%) : 사용량(MAX 대비 USED)
     , DECODE(STATE, 1, 'OFFLINE', 2, 'ONLINE', 5, 'OFFLINE BACKUP', 6, 'ONLINE BACKUP', 128, 'DROPPED', 'DISCARDED') STATE                             -- STATE    : 테이블스페이스 상태
     , D.AUTOEXTEND
  FROM V$TABLESPACES T LEFT OUTER JOIN(SELECT SPACE_ID , SUM(TOTAL_USED_SIZE) USED
                                         FROM X$SEGMENT
                                        GROUP BY SPACE_ID) DS ON DS.SPACE_ID = T.ID
     , (SELECT SPACEID
             , SUM(DECODE(MAXSIZE, 0, CURRSIZE, MAXSIZE)) AS MAX
             , DECODE(MAX(AUTOEXTEND), 1, 'ON', 'OFF') 'AUTOEXTEND'
          FROM V$DATAFILES
         GROUP BY SPACEID ) D
     , V$DISK_UNDO_USAGE U
     , (SELECT VALUE1 EXTENT_SIZE
          FROM V$PROPERTY
         WHERE NAME = 'SYS_UNDO_TBS_EXTENT_SIZE') PROP
 WHERE T.ID = D.SPACEID ;
        </QUERY>
        <DISPLAY> 1                  </DISPLAY>
        <CHECKNAME>    USAGE(%)  </CHECKNAME>
        <CHECKVALUE>   80          </CHECKVALUE>
        <COMPARE>      G             </COMPARE>
        <ENABLE> ON </ENABLE>
    </DISK_TBS_USAGE>

    <SEGMENT_USAGE>
        <QUERY>
           select name, sum(EXTENT_TOTAL_COUNT)*256 as 'usage(M)' 
           from v$tablespaces a,  V$SEGMENT b 
           where a.id=b.space_id 
           group by name 
           ORDER BY name;
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> OFF </ENABLE>
    </SEGMENT_USAGE>

    <UNDO_USAGE>
        <QUERY>
           select sum(total_page_count), sum(free_page_count), (sum(free_page_count)/sum(total_page_count))*100, sum(EXTENT_TOTAL_COUNT)*256 as 'usage(M)' 
           from v$tablespaces a,  V$SEGMENT b 
           where a.id=b.space_id 
           group by name 
           ORDER BY name;
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> OFF </ENABLE>
    </UNDO_USAGE>

    <DISK_UNDO_USAGE>
        <QUERY>
          SELECT * FROM V$DISK_UNDO_USAGE;
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> ON </ENABLE>
    </DISK_UNDO_USAGE>

    <DISK_TBL_USAGE>
        <QUERY>
SELECT U.USER_NAME USER_NAME
     , DECODE(TBL.IS_PARTITIONED, 'T', 'PARTITIONED', 'F', 'NON-PARTITIONED') PARTITIONED
     , TBL.TABLE_NAME TABLE_NAME
     , DECODE(TBL.IS_PARTITIONED, 'T', TBL.PARTITION_NAME, 'F', '-') PARTITIONED_TABLE
     , TBS.NAME TABLESPACE_NAME
     , TO_CHAR((D.MAX * TBS.PAGE_SIZE)/1024, '999,999,999') 'MAX(KB)'
     , TO_CHAR((TBS.EXTENT_PAGE_COUNT * TBS.PAGE_SIZE * SEG.TOTAL_EXTENT_COUNT)/1024, '999,999,999') 'ALLOC(KB)'
     , TO_CHAR(SEG.TOTAL_USED_SIZE/1024, '999,999,999,999') 'USED(KB)' 
     , TO_CHAR(((SEG.TOTAL_USED_SIZE/(D.MAX*TBS.PAGE_SIZE))*100), '99.99') 'USAGE(%)'
  FROM (SELECT TBL.USER_ID
             , DECODE(TBL.IS_PARTITIONED, 'F', TBL.TABLE_OID, 'T', PT.PARTITION_OID) TABLE_OID
             , TBL.TABLE_NAME
             , PT.PARTITION_NAME
             , DECODE(TBL.IS_PARTITIONED, 'F', TBL.TBS_ID, 'T', PT.TBS_ID) TBS_ID
             , TBL.IS_PARTITIONED
          FROM SYSTEM_.SYS_TABLES_ TBL LEFT OUTER JOIN SYSTEM_.SYS_TABLE_PARTITIONS_ PT ON TBL.TABLE_ID = PT.TABLE_ID
       ) TBL
     , X$SEGMENT SEG
     , SYSTEM_.SYS_USERS_ U
     , V$TABLESPACES TBS
     , (SELECT SPACEID
             , SUM(DECODE(MAXSIZE, 0, CURRSIZE, MAXSIZE)) AS MAX
             , DECODE(MAX(AUTOEXTEND),1,'ON','OFF') 'AUTOEXTEND'
          FROM V$DATAFILES
         GROUP BY SPACEID) D
 WHERE 1=1
   AND SEG.SEGMENT_TYPE = 6  /* 6 : 테이블, 5 : 인덱스 */
   AND SEG.TABLE_OID = TBL.TABLE_OID
   AND U.USER_ID = TBL.USER_ID
   AND D.SPACEID = TBL.TBS_ID
   AND TBS.ID = TBL.TBS_ID
 ORDER BY USER_NAME, PARTITIONED, TABLE_NAME, PARTITIONED_TABLE
;
        </QUERY>
        <DISPLAY>       1          </DISPLAY>
        <ENABLE>       ON         </ENABLE>
    </DISK_TBL_USAGE>

    <MEM_TBL_USAGE>
        <QUERY>
SELECT a.user_name
     , b.table_name
     , d.name tablespace_name
     , c.table_oid
     , round((c.fixed_alloc_mem + c.var_alloc_mem)/(1024*1024),2) 'ALLOC(M)'
     , round((c.fixed_used_mem + c.var_used_mem)/(1024*1024),2) 'USED(M)'
     , round((c.fixed_used_mem + c.var_used_mem)/(c.fixed_alloc_mem + c.var_alloc_mem)*100,2) 'EFFICIENCY(%)'
  FROM system_.sys_users_ a
     , system_.sys_tables_ b
     , v$memtbl_info c
     , v$tablespaces d
 WHERE a.user_name <> 'SYSTEM_'
   AND b.table_type = 'T'
   AND a.user_id = b.user_id
   AND b.table_oid = c.table_oid
   AND b.tbs_id = d.id ;
        </QUERY>
        <DISPLAY>       1          </DISPLAY>
        <CHECKNAME>    USED(M)    </CHECKNAME>
        <CHECKVALUE>   20480  </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE>       ON        </ENABLE>
        <ACTION>
           is -silent -f $HOME/altimon/ACTION_SCRIPT/mem_act.sql -o $HOME/altimon/ACTION_LOG/mem_act.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </MEM_TBL_USAGE>

    <SERVICE_THREAD_MODE>
        <QUERY>
        select run_mode, count(*) cnt from V$service_thread group by run_mode order by 1;
        </QUERY>
        <DISPLAY>     1         </DISPLAY>
        <ENABLE>      ON       </ENABLE>
    </SERVICE_THREAD_MODE>

    <SERVICE_THREAD_STATE>
        <QUERY>
        select state, count(*) cnt from V$service_thread group by state order by 1;
        </QUERY>
        <DISPLAY>     1         </DISPLAY>
        <ENABLE>      ON       </ENABLE>
    </SERVICE_THREAD_STATE>

    <SESSION_COUNT>
        <QUERY> select count(*) as sid_count from v$session </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <CHECKNAME>    sid_count   </CHECKNAME>
        <CHECKVALUE>   100           </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE>       ON </ENABLE>
        <ACTION>
        </ACTION>
    </SESSION_COUNT>

    <STATEMENT_COUNT>
        <QUERY> select count(*) as stmt_count from v$statement </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <CHECKNAME>    stmt_count   </CHECKNAME>
        <CHECKVALUE>   2000           </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE> ON </ENABLE>
        <ACTION>
        </ACTION>
    </STATEMENT_COUNT>

    <MEM_GC>
        <QUERY>
               select
                  gc_name,
               -- MINMEMSCNINTXS-SCNOFTAIL,
                  ADD_OID_CNT-GC_OID_CNT gc_gap
               from v$memgc;
        </QUERY>
        <DISPLAY>       1          </DISPLAY>
        <CHECKNAME>    gc_gap    </CHECKNAME>
        <CHECKVALUE>   1000  </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE>       ON         </ENABLE>
    </MEM_GC>

    <BUFFER_STAT>
        <QUERY>
            select victim_fails,READ_PAGES from v$buffpool_stat;
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> ON </ENABLE>
    </BUFFER_STAT>

    <LOCK_TX_DESC>
        <QUERY>
SELECT tx.id tx_id, wait_for_trans_id blocked_tx_id, decode(tx.status, 0, 'BEGIN', 1, 'PRECOMMIT', 2, 'COMMIT_IN_MEMORY', 3, 'COMMIT', 4, 'ABORT', 5, 'BLOCKED', 6, 'END') status, decode(tx.log_type, 0, u1.user_name, 'REPLICATION') user_name, decode(tx.log_type, 0, tx.SESSION_ID, rt.rep_name) session_id, decode(tx.log_type, 0, st.comm_name, rr.peer_ip) client_ip, decode(st.autocommit_flag, 1, 'ON', 'OFF') autocommit, l.lock_desc, decode(tx.first_update_time, 0, '0', to_char(to_date('1970010109','YYYYMMDDHH') + tx.first_update_time / (60*60*24), 'MM/DD HH:MI:SS')) first_update_time, u2.user_name||'.'||t.table_name table_name, decode(tx.LOG_TYPE, 0, substr(st.query, 1, 10), 'REMOTE TX_ID '||remote_tid) current_query, decode(tx.DDL_FLAG,0, 'non-DDL', 'DDL') ddl, decode(tx.first_undo_next_lsn_fileno, -1, '-', tx.first_undo_next_lsn_fileno) 'logfile#' FROM v$transaction tx, v$lock l left outer join (SELECT st.*, ss.autocommit_flag, ss.db_userid, ss.comm_name FROM v$statement st, v$session ss WHERE ss.id = st.session_id and ss.CURRENT_STMT_ID = st.id) st on l.trans_id = st.tx_id left outer join v$repreceiver_transtbl rt on l.trans_id = rt.local_tid left outer join v$repreceiver rr on rt.rep_name = rr.rep_name left outer join v$lock_wait lw on l.trans_id = lw.trans_id left outer join system_.sys_users_ u1 on st.db_userid = u1.user_id, system_.sys_tables_ t left outer join system_.sys_users_ u2 on t.user_id = u2.user_id WHERE tx.id = l.trans_id and t.table_oid = l.table_oid and tx.status != 6 
-- 6:END ORDER BY tx.id, st.id, tx.first_update_time desc 
;
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> ON </ENABLE>
    </LOCK_TX_DESC>

    <LOCK_DESC>
        <QUERY>
            select b.session_id as sid, 
                   b.tx_id as tId, 
                   b.is_grant as isgran,
                   b.lock_desc as Ldesc, 
                   a.table_name as ltable,
                   trunc(c.total_time/1000000, 4) as TTime
            from system_.sys_tables_ a, v$lock_statement b, v$statement c
            where a.table_oid = b.table_oid
              and   c.session_id = b.session_id
              and   c.tx_id      = b.tx_id
              and   (c.total_time/1000000) > 1
            group by b.session_id, b.tx_id, b.is_grant, total_time, a.table_name, b.lock_desc 
            order by b.session_id, b.tx_id, b.is_grant, total_time, a.table_name, b.lock_desc  
            --order by b.tx_id, b.table_oid, b.is_grant, c.total_time
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> ON </ENABLE>
    </LOCK_DESC>

    <LONG_RUN_QUERY>
        <QUERY>
               select to_char(sysdate, 'YYYY/MM/DD HH:MI:SS') cur_time,
                      start_time,
                      session_id sid,
                      comm_name ip,
                      client_pid pid,
                      stmt_id,
                      tx_id,
                      active_flag,
                      execute_flag,
                      begin_flag,
                      trunc(execute_time/1000000,2) rtime,
                      trunc(fetch_time/1000000,2) ftime,
                      trunc(total_time/1000000,2) ttime,
                      query
               from ( select CASE2(LAST_QUERY_START_TIME = 0, '1970/01/01 12:00:00',
                       TO_CHAR(TO_DATE('1970010109','YYYYMMDDHH') +
                       LAST_QUERY_START_TIME/60/60/24 , 'YYYY/MM/DD HH:MI:SS')) as start_time,
                             session_id,
                             id as stmt_id,
                             tx_id,
                             execute_time,
                             fetch_time,
                             total_time,
                             execute_flag,
                             begin_flag,
                             query
                      FROM v$statement) a, v$session b
               where a.session_id = b.id
                 and query not like '%LAST_QUERY_START_TIME%'
                 and total_time/1000000 > 1
                 --and (sysdate - to_date(start_time, 'YYYY/MM/DD HH:MI:SS'))*24*60*60 >= total_time
                 and IDLE_START_TIME = 0
                 and CURRENT_STMT_ID = stmt_id
               order by ttime desc;
        </QUERY>
        <DISPLAY>    1   </DISPLAY>
        <ENABLE>     ON  </ENABLE>
        <ACTION>
           is -silent -f $HOME/altimon/ACTION_SCRIPT/long_query.sql -o $HOME/altimon/ACTION_LOG/long_query.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </LONG_RUN_QUERY>

    <UTRANS_QUERY>
        <QUERY>
            SELECT 
                   ST.SESSION_ID AS SID,
                   SS.COMM_NAME AS IP,
                   SS.client_pid AS PID,
                   ST.ID AS STMT_ID, 
                   BASE_TIME - TR.FIRST_UPDATE_TIME AS UTRANS_TIME
              FROM V$TRANSACTION TR, V$STATEMENT ST, v$session SS, V$SESSIONMGR
             WHERE TR.ID = ST.TX_ID 
               AND ST.SESSION_ID = SS.ID
               AND TR.FIRST_UPDATE_TIME != 0
               AND (BASE_TIME - tr.FIRST_UPDATE_TIME) > 60
            ;
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> ON </ENABLE>
    </UTRANS_QUERY>

    <REPLICATION_GAP>
        <QUERY>
        SELECT REP_NAME, REP_GAP FROM V$REPGAP ;
        </QUERY>
        <CHECKNAME>   rep_gap   </CHECKNAME>
        <CHECKVALUE>  100000    </CHECKVALUE>
        <COMPARE>     G         </COMPARE>
        <DISPLAY>     0         </DISPLAY>
        <ENABLE>      ON        </ENABLE>
        <ACTION>
           is -silent -f $HOME/altimon/ACTION_SCRIPT/rep_act.sql -o $HOME/altimon/ACTION_LOG/rep_act.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </REPLICATION_GAP>

    <SYSTEM_WAIT_CLASS>
        <QUERY>
            SELECT * FROM V$SYSTEM_WAIT_CLASS;
        </QUERY>
        <DISPLAY>       1        </DISPLAY>
        <ENABLE>       ON        </ENABLE>
    </SYSTEM_WAIT_CLASS>

    <SESSION_EVENT>
        <QUERY>
           SELECT SID, EVENT, TOTAL_WAITS, AVERAGE_WAIT, TIME_WAITED, TIME_WAITED_MICRO, AVERAGE_WAIT
             FROM V$SESSION_EVENT
            ORDER BY TOTAL_WAITS DESC
            LIMIT 10;
        </QUERY>
        <DISPLAY>       1        </DISPLAY>
        <ENABLE>       ON        </ENABLE>
    </SESSION_EVENT>

    <DB_EVENT>
        <QUERY>
           SELECT WAIT_CLASS, EVENT, TOTAL_WAITS, TIME_WAITED_MICRO
             FROM V$SYSTEM_EVENT
            WHERE WAIT_CLASS != 'Idle'
            ORDER BY TIME_WAITED_MICRO DESC
            LIMIT 10;
        </QUERY>
        <DISPLAY>       1        </DISPLAY>
        <ENABLE>       ON        </ENABLE>
    </DB_EVENT>

    <DATAFILE_STAT>
        <QUERY>
           SELECT B.NAME, A.SINGLEBLKRDS, A.SINGLEBLKRDTIM, TRUNC(A.SINGLEBLKRDTIM/A.SINGLEBLKRDS,2) AVERAGE_WAIT
             FROM V$FILESTAT A,
                  V$DATAFILES B
            WHERE A.SPACEID = B.SPACEID
              AND A.FILEID = B.ID
              AND A.SINGLEBLKRDS > 0
            ORDER BY AVERAGE_WAIT DESC;
        </QUERY>
        <DISPLAY>       1        </DISPLAY>
        <ENABLE>       ON      </ENABLE>
    </DATAFILE_STAT>

    <DATAFILE_STAT_2>
        <QUERY>
           SELECT SUBSTR( B.NAME, 1, 128 ) NAME, A.PHYRDS PHY_RDS, A.PHYWRTS PHY_WRTS, A.PHYRDS + A.PHYWRTS TOTAL_IO,
                  TRUNC( A.PHYRDS / READ_SUM * 100, 2 ) READ_PER, TRUNC( A.PHYWRTS / WRITE_SUM * 100, 2 ) WRITE_PER,
                  TRUNC( ( A.PHYRDS + A.PHYWRTS ) / ( READ_SUM + WRITE_SUM ) * 100 , 2 ) TOTAL_IO_PER, A.AVGIOTIM AVG_IO_TIME
             FROM V$FILESTAT A,
                  V$DATAFILES B,
                  ( SELECT SUM(PHYRDS) READ_SUM, SUM(PHYWRTS) WRITE_SUM 
                      FROM V$FILESTAT ) C
            WHERE A.SPACEID = B.SPACEID
              AND A.FILEID = B.ID
              AND READ_SUM > 0
              AND WRITE_SUM > 0
            ORDER BY A.PHYRDS + A.PHYWRTS DESC, ROWNUM DESC;
        </QUERY>
        <DISPLAY>       1        </DISPLAY>
        <ENABLE>       ON      </ENABLE>
    </DATAFILE_STAT_2>
    <SQL_PLAN_CACHE>
        <QUERY>
           SELECT * FROM V$SQL_PLAN_CACHE;
        </QUERY>
        <DISPLAY>       1        </DISPLAY>
        <ENABLE>       ON        </ENABLE>
    </SQL_PLAN_CACHE>
</MONITOR_QUERY_GROUP_SET>
